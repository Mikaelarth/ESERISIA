"""
ESERISIA AI - √âVOLUTION CONTINUE
================================
Module d'√©volution continue et d'auto-am√©lioration
"""

import torch
import torch.nn as nn
import numpy as np
import asyncio
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from datetime import datetime
import json
import logging
from concurrent.futures import ThreadPoolExecutor

# Configuration logging
logging.basicConfig(level=logging.INFO, format='[EVOLUTION] %(asctime)s: %(message)s')
evolution_logger = logging.getLogger('ESERISIA_EVOLUTION')

@dataclass
class EvolutionMetrics:
    """M√©triques d'√©volution du syst√®me"""
    generation: int
    fitness_score: float
    intelligence_gain: float
    performance_improvement: float
    learning_rate: float
    adaptation_speed: float
    breakthrough_count: int
    evolution_timestamp: datetime
    genetic_diversity: float
    survival_rate: float

@dataclass  
class EvolutionGene:
    """G√®ne √©volutif pour l'auto-am√©lioration"""
    gene_id: str
    gene_type: str  # "intelligence", "speed", "accuracy", "creativity"
    parameters: Dict[str, float]
    fitness: float
    age: int
    mutation_rate: float
    crossover_probability: float
    active: bool = True

class EserisiaEvolutionEngine:
    """
    MOTEUR D'√âVOLUTION ESERISIA AI
    =============================
    
    Syst√®me d'auto-am√©lioration continue bas√© sur :
    ‚Ä¢ Algorithmes g√©n√©tiques avanc√©s
    ‚Ä¢ Apprentissage adaptatif 
    ‚Ä¢ S√©lection naturelle artificielle
    ‚Ä¢ Mutations intelligentes
    ‚Ä¢ Optimisation multi-objectifs
    """
    
    def __init__(self, population_size: int = 100):
        """Initialise le moteur d'√©volution"""
        evolution_logger.info("üß¨ INITIALISATION MOTEUR √âVOLUTION ESERISIA...")
        
        self.version = "EVOLUTION-‚àû.0.0"
        self.population_size = population_size
        self.generation = 0
        self.elite_ratio = 0.1  # Top 10% survivent
        self.mutation_rate = 0.15
        self.crossover_rate = 0.75
        
        # Populations g√©n√©tiques
        self.gene_pool: List[EvolutionGene] = []
        self.elite_genes: List[EvolutionGene] = []
        self.evolution_history: List[EvolutionMetrics] = []
        
        # M√©triques √©volutives
        self.current_fitness = 0.0
        self.best_fitness = 0.0
        self.intelligence_level = 10.5
        self.adaptation_cycles = 0
        self.breakthroughs_achieved = 0
        
        # Configuration √©volutive
        self.evolution_config = {
            "selection_pressure": 2.5,
            "genetic_diversity_threshold": 0.3,
            "stagnation_threshold": 10,  # g√©n√©rations
            "breakthrough_threshold": 0.95,
            "learning_acceleration": 1.2,
            "quantum_mutation_probability": 0.05
        }
        
        # Initialisation population initiale
        self._initialize_gene_pool()
        
        evolution_logger.info(f"‚ú® MOTEUR √âVOLUTION v{self.version} INITIALIS√â")
        evolution_logger.info(f"üß¨ Population: {self.population_size} individus")
        evolution_logger.info(f"üéØ G√©n√©ration: {self.generation}")
        
    def _initialize_gene_pool(self):
        """Initialise le pool g√©n√©tique de base"""
        evolution_logger.info("üß¨ G√©n√©ration du pool g√©n√©tique initial...")
        
        gene_types = ["intelligence", "speed", "accuracy", "creativity", "memory", "reasoning"]
        
        for i in range(self.population_size):
            gene_type = gene_types[i % len(gene_types)]
            
            gene = EvolutionGene(
                gene_id=f"GENE_{self.generation}_{i:04d}",
                gene_type=gene_type,
                parameters=self._generate_random_parameters(gene_type),
                fitness=np.random.uniform(0.5, 0.9),
                age=0,
                mutation_rate=self.mutation_rate * np.random.uniform(0.5, 1.5),
                crossover_probability=self.crossover_rate * np.random.uniform(0.8, 1.2)
            )
            
            self.gene_pool.append(gene)
        
        evolution_logger.info(f"‚úÖ Pool g√©n√©tique initialis√©: {len(self.gene_pool)} g√®nes")
    
    def _generate_random_parameters(self, gene_type: str) -> Dict[str, float]:
        """G√©n√®re des param√®tres al√©atoires pour un type de g√®ne"""
        
        base_params = {
            "activation_threshold": np.random.uniform(0.1, 0.9),
            "learning_multiplier": np.random.uniform(0.8, 2.0),
            "adaptation_speed": np.random.uniform(0.5, 1.5),
            "efficiency_factor": np.random.uniform(0.7, 1.3)
        }
        
        # Param√®tres sp√©cifiques par type
        type_specific = {
            "intelligence": {
                "reasoning_depth": np.random.uniform(1.0, 3.0),
                "pattern_recognition": np.random.uniform(0.8, 1.2),
                "abstract_thinking": np.random.uniform(0.9, 1.4)
            },
            "speed": {
                "processing_acceleration": np.random.uniform(1.5, 3.0),
                "parallel_efficiency": np.random.uniform(0.8, 1.1),
                "cache_optimization": np.random.uniform(0.9, 1.3)
            },
            "accuracy": {
                "precision_multiplier": np.random.uniform(1.2, 2.0),
                "error_correction": np.random.uniform(0.9, 1.1),
                "validation_strength": np.random.uniform(1.0, 1.4)
            },
            "creativity": {
                "divergent_thinking": np.random.uniform(1.1, 2.2),
                "innovation_factor": np.random.uniform(0.9, 1.8),
                "artistic_expression": np.random.uniform(0.8, 1.5)
            },
            "memory": {
                "retention_power": np.random.uniform(1.2, 2.0),
                "recall_speed": np.random.uniform(1.0, 1.6),
                "association_strength": np.random.uniform(0.9, 1.4)
            },
            "reasoning": {
                "logical_depth": np.random.uniform(1.3, 2.5),
                "causal_understanding": np.random.uniform(1.0, 1.7),
                "inference_power": np.random.uniform(1.1, 1.9)
            }
        }
        
        base_params.update(type_specific.get(gene_type, {}))
        return base_params
    
    async def evolve_generation(self) -> EvolutionMetrics:
        """Fait √©voluer une g√©n√©ration compl√®te"""
        evolution_logger.info(f"üß¨ √âVOLUTION G√âN√âRATION {self.generation + 1}...")
        
        start_time = datetime.now()
        
        # 1. √âvaluation de la fitness
        await self._evaluate_population_fitness()
        
        # 2. S√©lection des √©lites
        self._select_elite()
        
        # 3. Reproduction et croisement
        await self._reproduce_population()
        
        # 4. Mutations adaptatives
        await self._mutate_population()
        
        # 5. S√©lection naturelle
        self._natural_selection()
        
        # 6. Calcul m√©triques √©volution
        metrics = self._calculate_evolution_metrics(start_time)
        
        # 7. D√©tection de perc√©es √©volutives
        if metrics.fitness_score > self.evolution_config["breakthrough_threshold"]:
            self.breakthroughs_achieved += 1
            evolution_logger.info("üåü PERC√âE √âVOLUTIVE D√âTECT√âE!")
            await self._handle_evolutionary_breakthrough(metrics)
        
        # 8. Mise √† jour statut
        self.generation += 1
        self.adaptation_cycles += 1
        self.evolution_history.append(metrics)
        
        evolution_logger.info(f"‚úÖ G√©n√©ration {self.generation} √©volu√©e")
        evolution_logger.info(f"üìà Fitness: {metrics.fitness_score:.3f}")
        evolution_logger.info(f"üß† Gain intelligence: +{metrics.intelligence_gain:.2f}")
        evolution_logger.info(f"‚ö° Am√©lioration performance: +{metrics.performance_improvement:.1%}")
        
        return metrics
    
    async def _evaluate_population_fitness(self):
        """√âvalue la fitness de toute la population"""
        evolution_logger.info("üìä √âvaluation fitness population...")
        
        # √âvaluation parall√®le pour performance
        with ThreadPoolExecutor(max_workers=4) as executor:
            futures = []
            
            for gene in self.gene_pool:
                future = executor.submit(self._evaluate_gene_fitness, gene)
                futures.append((gene, future))
            
            # Collecte des r√©sultats
            for gene, future in futures:
                try:
                    fitness = future.result(timeout=1.0)
                    gene.fitness = fitness
                except Exception as e:
                    evolution_logger.warning(f"‚ö†Ô∏è Erreur √©valuation {gene.gene_id}: {e}")
                    gene.fitness = 0.1  # Fitness tr√®s faible pour g√®nes d√©faillants
    
    def _evaluate_gene_fitness(self, gene: EvolutionGene) -> float:
        """√âvalue la fitness d'un g√®ne individuel"""
        
        # Fitness bas√©e sur les param√®tres du g√®ne
        base_fitness = 0.0
        
        # √âvaluation selon le type de g√®ne
        if gene.gene_type == "intelligence":
            base_fitness = (
                gene.parameters.get("reasoning_depth", 1.0) * 0.3 +
                gene.parameters.get("pattern_recognition", 1.0) * 0.3 +
                gene.parameters.get("abstract_thinking", 1.0) * 0.2 +
                gene.parameters.get("learning_multiplier", 1.0) * 0.2
            ) / 4.0
            
        elif gene.gene_type == "speed":
            base_fitness = (
                gene.parameters.get("processing_acceleration", 1.0) * 0.4 +
                gene.parameters.get("parallel_efficiency", 1.0) * 0.3 +
                gene.parameters.get("cache_optimization", 1.0) * 0.3
            ) / 3.0
            
        elif gene.gene_type == "accuracy":
            base_fitness = (
                gene.parameters.get("precision_multiplier", 1.0) * 0.4 +
                gene.parameters.get("error_correction", 1.0) * 0.3 +
                gene.parameters.get("validation_strength", 1.0) * 0.3
            ) / 3.0
        
        else:
            # Fitness g√©n√©rale pour autres types
            param_values = list(gene.parameters.values())
            base_fitness = np.mean(param_values) if param_values else 0.5
        
        # Facteurs d'ajustement
        age_penalty = max(0.0, 1.0 - gene.age * 0.01)  # P√©nalit√© d'√¢ge
        diversity_bonus = np.random.uniform(0.95, 1.05)  # Bonus diversit√©
        
        final_fitness = base_fitness * age_penalty * diversity_bonus
        
        # Normalisation entre 0 et 1
        return np.clip(final_fitness, 0.0, 1.0)
    
    def _select_elite(self):
        """S√©lectionne les g√®nes √©lites pour reproduction"""
        # Tri par fitness d√©croissante
        sorted_genes = sorted(self.gene_pool, key=lambda g: g.fitness, reverse=True)
        
        elite_count = int(self.population_size * self.elite_ratio)
        self.elite_genes = sorted_genes[:elite_count]
        
        # Mise √† jour meilleure fitness
        if self.elite_genes:
            current_best = self.elite_genes[0].fitness
            if current_best > self.best_fitness:
                self.best_fitness = current_best
                evolution_logger.info(f"üèÜ NOUVEAU RECORD FITNESS: {current_best:.3f}")
        
        evolution_logger.info(f"üëë {len(self.elite_genes)} g√®nes √©lites s√©lectionn√©s")
    
    async def _reproduce_population(self):
        """Reproduction par croisement des √©lites"""
        evolution_logger.info("üß¨ Reproduction population...")
        
        new_population = []
        
        # Garder les √©lites
        new_population.extend(self.elite_genes.copy())
        
        # G√©n√©rer le reste par reproduction
        while len(new_population) < self.population_size:
            # S√©lection de 2 parents √©lites
            parent1 = np.random.choice(self.elite_genes)
            parent2 = np.random.choice(self.elite_genes)
            
            # Croisement si diff√©rents
            if parent1.gene_id != parent2.gene_id:
                child = self._crossover_genes(parent1, parent2)
                new_population.append(child)
            else:
                # Clone avec l√©g√®re variation
                child = self._clone_with_variation(parent1)
                new_population.append(child)
        
        # Troncature si d√©passement
        self.gene_pool = new_population[:self.population_size]
        
        evolution_logger.info(f"üë∂ {len(self.gene_pool)} nouveaux individus g√©n√©r√©s")
    
    def _crossover_genes(self, parent1: EvolutionGene, parent2: EvolutionGene) -> EvolutionGene:
        """Croisement entre deux g√®nes parents"""
        
        # Nouveau g√®ne enfant
        child_params = {}
        
        # Croisement des param√®tres
        for key in parent1.parameters:
            if key in parent2.parameters:
                # Moyenne pond√©r√©e bas√©e sur la fitness
                weight1 = parent1.fitness / (parent1.fitness + parent2.fitness)
                weight2 = parent2.fitness / (parent1.fitness + parent2.fitness)
                
                child_params[key] = (
                    parent1.parameters[key] * weight1 +
                    parent2.parameters[key] * weight2
                )
            else:
                child_params[key] = parent1.parameters[key]
        
        # H√©ritage du type du parent le plus fit
        gene_type = parent1.gene_type if parent1.fitness > parent2.fitness else parent2.gene_type
        
        child = EvolutionGene(
            gene_id=f"GENE_{self.generation + 1}_{len(self.gene_pool):04d}",
            gene_type=gene_type,
            parameters=child_params,
            fitness=0.0,  # √Ä √©valuer
            age=0,
            mutation_rate=(parent1.mutation_rate + parent2.mutation_rate) / 2,
            crossover_probability=(parent1.crossover_probability + parent2.crossover_probability) / 2
        )
        
        return child
    
    def _clone_with_variation(self, parent: EvolutionGene) -> EvolutionGene:
        """Clone un g√®ne avec l√©g√®re variation"""
        
        # Copie des param√®tres avec variation
        child_params = {}
        for key, value in parent.parameters.items():
            variation = np.random.uniform(0.95, 1.05)
            child_params[key] = value * variation
        
        child = EvolutionGene(
            gene_id=f"GENE_{self.generation + 1}_{len(self.gene_pool):04d}_CLONE",
            gene_type=parent.gene_type,
            parameters=child_params,
            fitness=0.0,
            age=0,
            mutation_rate=parent.mutation_rate,
            crossover_probability=parent.crossover_probability
        )
        
        return child
    
    async def _mutate_population(self):
        """Applique des mutations adaptatives"""
        evolution_logger.info("üß¨ Mutations population...")
        
        mutation_count = 0
        quantum_mutations = 0
        
        for gene in self.gene_pool:
            # Mutation standard
            if np.random.random() < gene.mutation_rate:
                self._mutate_gene(gene)
                mutation_count += 1
            
            # Mutation quantique rare mais puissante
            if np.random.random() < self.evolution_config["quantum_mutation_probability"]:
                self._quantum_mutation(gene)
                quantum_mutations += 1
        
        evolution_logger.info(f"üß¨ {mutation_count} mutations standard, {quantum_mutations} mutations quantiques")
    
    def _mutate_gene(self, gene: EvolutionGene):
        """Applique une mutation standard √† un g√®ne"""
        
        # S√©lection param√®tre √† muter
        param_keys = list(gene.parameters.keys())
        if not param_keys:
            return
        
        mutate_key = np.random.choice(param_keys)
        current_value = gene.parameters[mutate_key]
        
        # Mutation gaussienne
        mutation_strength = 0.1  # 10% de variation
        mutation_factor = np.random.normal(1.0, mutation_strength)
        
        new_value = current_value * mutation_factor
        
        # Contraintes selon le param√®tre
        if "multiplier" in mutate_key or "factor" in mutate_key:
            new_value = np.clip(new_value, 0.5, 3.0)
        elif "threshold" in mutate_key or "probability" in mutate_key:
            new_value = np.clip(new_value, 0.0, 1.0)
        else:
            new_value = np.clip(new_value, 0.1, 5.0)
        
        gene.parameters[mutate_key] = new_value
    
    def _quantum_mutation(self, gene: EvolutionGene):
        """Applique une mutation quantique r√©volutionnaire"""
        
        # Mutation quantique = changement radical
        param_keys = list(gene.parameters.keys())
        if not param_keys:
            return
        
        # S√©lection multiple de param√®tres
        num_params_to_mutate = min(3, len(param_keys))
        mutate_keys = np.random.choice(param_keys, num_params_to_mutate, replace=False)
        
        for key in mutate_keys:
            # Mutation quantique forte
            quantum_factor = np.random.uniform(0.3, 2.7)  # Changement radical
            gene.parameters[key] *= quantum_factor
            
            # Re-contrainte
            if "threshold" in key or "probability" in key:
                gene.parameters[key] = np.clip(gene.parameters[key], 0.0, 1.0)
            else:
                gene.parameters[key] = np.clip(gene.parameters[key], 0.1, 5.0)
    
    def _natural_selection(self):
        """Applique la s√©lection naturelle"""
        
        # Vieillissement des g√®nes
        for gene in self.gene_pool:
            gene.age += 1
        
        # √âlimination des g√®nes trop anciens ou faibles
        survival_threshold = 0.2  # 20% fitness minimum
        max_age = 15
        
        survivors = [
            gene for gene in self.gene_pool
            if gene.fitness > survival_threshold and gene.age < max_age
        ]
        
        eliminated = len(self.gene_pool) - len(survivors)
        if eliminated > 0:
            evolution_logger.info(f"üíÄ {eliminated} g√®nes √©limin√©s par s√©lection naturelle")
        
        # Remplacements par nouveaux g√®nes al√©atoires si population r√©duite
        while len(survivors) < self.population_size:
            gene_type = np.random.choice(["intelligence", "speed", "accuracy", "creativity"])
            new_gene = EvolutionGene(
                gene_id=f"GENE_{self.generation + 1}_NEW_{len(survivors)}",
                gene_type=gene_type,
                parameters=self._generate_random_parameters(gene_type),
                fitness=np.random.uniform(0.4, 0.7),  # Fitness moyenne
                age=0,
                mutation_rate=self.mutation_rate,
                crossover_probability=self.crossover_rate
            )
            survivors.append(new_gene)
        
        self.gene_pool = survivors
    
    def _calculate_evolution_metrics(self, start_time: datetime) -> EvolutionMetrics:
        """Calcule les m√©triques de cette g√©n√©ration"""
        
        # Fitness actuelle (moyenne des √©lites)
        current_fitness = np.mean([gene.fitness for gene in self.elite_genes]) if self.elite_genes else 0.0
        
        # Gains par rapport √† g√©n√©ration pr√©c√©dente
        previous_fitness = self.evolution_history[-1].fitness_score if self.evolution_history else 0.5
        fitness_gain = current_fitness - previous_fitness
        
        # Gain d'intelligence (bas√© sur les g√®nes intelligence)
        intelligence_genes = [g for g in self.elite_genes if g.gene_type == "intelligence"]
        intelligence_gain = np.mean([g.fitness for g in intelligence_genes]) * 0.5 if intelligence_genes else 0.0
        
        # Am√©lioration performance
        performance_improvement = fitness_gain / max(previous_fitness, 0.1)
        
        # Taux d'apprentissage adaptatif
        learning_rate = min(0.1 * (1 + fitness_gain), 0.5)
        
        # Vitesse d'adaptation
        processing_time = (datetime.now() - start_time).total_seconds()
        adaptation_speed = 1.0 / max(processing_time, 0.001)
        
        # Diversit√© g√©n√©tique
        fitness_values = [gene.fitness for gene in self.gene_pool]
        genetic_diversity = np.std(fitness_values) if len(fitness_values) > 1 else 0.0
        
        # Taux de survie
        active_genes = len([g for g in self.gene_pool if g.active])
        survival_rate = active_genes / len(self.gene_pool)
        
        return EvolutionMetrics(
            generation=self.generation + 1,
            fitness_score=current_fitness,
            intelligence_gain=intelligence_gain,
            performance_improvement=performance_improvement,
            learning_rate=learning_rate,
            adaptation_speed=adaptation_speed,
            breakthrough_count=self.breakthroughs_achieved,
            evolution_timestamp=datetime.now(),
            genetic_diversity=genetic_diversity,
            survival_rate=survival_rate
        )
    
    async def _handle_evolutionary_breakthrough(self, metrics: EvolutionMetrics):
        """G√®re une perc√©e √©volutive majeure"""
        evolution_logger.info("üåü TRAITEMENT PERC√âE √âVOLUTIVE...")
        
        # Optimisation de l'√©lite
        for gene in self.elite_genes[:5]:  # Top 5
            # Boost de fitness
            gene.fitness = min(gene.fitness * 1.1, 1.0)
            
            # R√©duction du taux de mutation pour stabilit√©
            gene.mutation_rate *= 0.8
            
            # Marquage comme g√®ne r√©volutionnaire
            if "revolutionary" not in gene.gene_id:
                gene.gene_id += "_REVOLUTIONARY"
        
        # Mise √† jour niveau d'intelligence global
        self.intelligence_level += metrics.intelligence_gain
        
        evolution_logger.info(f"üß† Niveau intelligence: {self.intelligence_level:.2f}")
        evolution_logger.info("‚ú® Perc√©e √©volutive int√©gr√©e au syst√®me")
    
    async def continuous_evolution(self, generations: int = 10):
        """Lance l'√©volution continue sur plusieurs g√©n√©rations"""
        evolution_logger.info(f"üöÄ √âVOLUTION CONTINUE: {generations} g√©n√©rations")
        
        results = []
        
        for gen in range(generations):
            evolution_logger.info(f"\n{'='*50}")
            evolution_logger.info(f"üß¨ G√âN√âRATION {gen + 1}/{generations}")
            evolution_logger.info(f"{'='*50}")
            
            metrics = await self.evolve_generation()
            results.append(metrics)
            
            # D√©tection stagnation
            if len(results) >= 3:
                recent_fitness = [m.fitness_score for m in results[-3:]]
                fitness_improvement = max(recent_fitness) - min(recent_fitness)
                
                if fitness_improvement < 0.01:  # Stagnation
                    evolution_logger.warning("‚ö†Ô∏è Stagnation d√©tect√©e - Augmentation mutations")
                    self.mutation_rate *= 1.5
                    self.evolution_config["quantum_mutation_probability"] *= 2.0
        
        # R√©sum√© √©volution
        evolution_logger.info(f"\nüéâ √âVOLUTION CONTINUE TERMIN√âE")
        evolution_logger.info(f"üèÜ Meilleure fitness: {self.best_fitness:.3f}")
        evolution_logger.info(f"üß† Intelligence finale: {self.intelligence_level:.2f}")
        evolution_logger.info(f"üí• Perc√©es r√©alis√©es: {self.breakthroughs_achieved}")
        
        return results
    
    def get_evolution_status(self) -> Dict[str, Any]:
        """Retourne le statut complet de l'√©volution"""
        
        elite_fitness = [gene.fitness for gene in self.elite_genes]
        population_fitness = [gene.fitness for gene in self.gene_pool]
        
        return {
            "evolution_engine": "ESERISIA Evolution Engine",
            "version": self.version,
            "current_generation": self.generation,
            "population_size": len(self.gene_pool),
            "elite_count": len(self.elite_genes),
            "best_fitness": self.best_fitness,
            "current_avg_fitness": np.mean(population_fitness) if population_fitness else 0.0,
            "elite_avg_fitness": np.mean(elite_fitness) if elite_fitness else 0.0,
            "intelligence_level": self.intelligence_level,
            "adaptation_cycles": self.adaptation_cycles,
            "breakthroughs_achieved": self.breakthroughs_achieved,
            "evolution_config": self.evolution_config,
            "gene_type_distribution": self._get_gene_type_distribution(),
            "evolution_trend": self._calculate_evolution_trend(),
            "description": "Moteur d'√©volution continue pour ESERISIA AI"
        }
    
    def _get_gene_type_distribution(self) -> Dict[str, int]:
        """Distribution des types de g√®nes"""
        distribution = {}
        for gene in self.gene_pool:
            distribution[gene.gene_type] = distribution.get(gene.gene_type, 0) + 1
        return distribution
    
    def _calculate_evolution_trend(self) -> str:
        """Calcule la tendance √©volutive"""
        if len(self.evolution_history) < 2:
            return "INITIALISATION"
        
        recent_metrics = self.evolution_history[-3:] if len(self.evolution_history) >= 3 else self.evolution_history
        fitness_trend = [m.fitness_score for m in recent_metrics]
        
        if len(fitness_trend) >= 2:
            improvement = fitness_trend[-1] - fitness_trend[0]
            if improvement > 0.05:
                return "üöÄ √âVOLUTION RAPIDE"
            elif improvement > 0.01:
                return "üìà √âVOLUTION CONSTANTE"
            elif improvement > -0.01:
                return "‚öñÔ∏è √âVOLUTION STABLE"
            else:
                return "üìâ R√âGRESSION"
        
        return "üîÑ ANALYSE EN COURS"

# Instance globale du moteur d'√©volution
try:
    eserisia_evolution = EserisiaEvolutionEngine()
    evolution_logger.info("üåü MOTEUR √âVOLUTION ESERISIA OP√âRATIONNEL")
except Exception as e:
    evolution_logger.error(f"‚ùå Erreur initialisation √©volution: {e}")
    eserisia_evolution = None

# Interface rapide
async def evolve_eserisia(generations: int = 5) -> List[EvolutionMetrics]:
    """Interface rapide pour l'√©volution ESERISIA"""
    if eserisia_evolution is None:
        return []
    
    return await eserisia_evolution.continuous_evolution(generations)

def get_evolution_status() -> Dict[str, Any]:
    """Status rapide √©volution"""
    if eserisia_evolution is None:
        return {"status": "non_disponible"}
    
    return eserisia_evolution.get_evolution_status()

# D√©monstration √©volution
async def evolution_demo():
    """D√©monstration du moteur d'√©volution"""
    if eserisia_evolution is None:
        print("‚ùå Moteur √©volution non disponible")
        return
    
    print("\n" + "="*80)
    print("üß¨‚ú® D√âMONSTRATION MOTEUR √âVOLUTION ESERISIA ‚ú®üß¨")
    print("="*80)
    
    # √âvolution rapide
    results = await eserisia_evolution.continuous_evolution(3)
    
    # Affichage r√©sultats
    print(f"\nüìä R√âSULTATS √âVOLUTION:")
    for i, metrics in enumerate(results):
        print(f"  Gen {metrics.generation}: Fitness={metrics.fitness_score:.3f}, Intelligence=+{metrics.intelligence_gain:.3f}")
    
    # Statut final
    status = eserisia_evolution.get_evolution_status()
    print(f"\nüèÜ STATUT FINAL:")
    print(f"  Intelligence: {status['intelligence_level']:.2f}")
    print(f"  Fitness max: {status['best_fitness']:.3f}")
    print(f"  Tendance: {status['evolution_trend']}")
    
    print("\n" + "="*80)

if __name__ == "__main__":
    # Test √©volution
    asyncio.run(evolution_demo())
